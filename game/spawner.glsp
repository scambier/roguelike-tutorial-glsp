(def MAX-MONSTERS 4)
(def MAX-ITEMS 2)

;; player

(defn spawner:player (x y)
  (ecs:spawn
    (Player)
    (Name (name "Player"))
    (Renderable (glyph \@)  (fg (Color 1 1 1)) (bg #n))
    (Position (x x) (y y))
    (Viewshed (visible-tiles (arr)) (range 9) (dirty #t))
    (CombatStats (max-hp 30) (hp 30) (defense 2) (power 5))))


;; monsters

;; spawn an orc
(defn spawner:orc (x y)
  (spawner:monster x y \o "Orc"))

;; spawn a goblin
(defn spawner:goblin (x y)
  (spawner:monster x y \g "Goblin"))

;; spawn a random monster
(defn spawner:random-monster (x y)
  (match (rng:dice 1 2)
    (1 (spawner:orc x y))
    (_ (spawner:goblin x y))))


;; generic function to spawn a monster
(defn spawner:monster (x y glyph name)
  (ecs:spawn
    (Position x y)
    (Renderable (glyph glyph) (fg (Color 1 0 0)) (bg #n))
    (Viewshed (visible-tiles (arr)) (range 8) (dirty #t))
    (Name (name name))
    (Monster)
    (BlocksTile)
    (CombatStats (max-hp 16) (hp 16) (defense 1) (power 4))))


;; items

;; health potion
(defn spawner:health-potion (x y)
  (ecs:spawn
    (Name (name "Health Potion"))
    (Position (x x) (y y))
    (Item)
    (Potion (heal-amount 8))
    (Renderable (glyph (ss-idx 104 248)) (fg (Color 0 1 0)) (bg (Color 0 0 0)))))

;; map

(defn spawner:room (room)
  (let map (ecs:fetch 'map))
  (let spawned-monsters (arr))
  (let spawned-items (arr))

  (let num-monsters (- (rng:dice 1 (+ MAX-MONSTERS 2)) 3))
  (let num-items (- (rng:dice 1 (+ MAX-ITEMS 2)) 3))

  ;; try random positions to place monsters
  ;; while the new position isn't free
  (forn (i 0 num-monsters)
    (let added #f)
    (while (not added)
      (let x (+ [room 'x1] (rng:dice 1 [room 'width])))
      (let y (+ [room 'y1] (rng:dice 1 [room 'height])))
      (let idx (.xy-idx map x y))
      (unless (arr-contains? spawned-monsters idx)
        (push! spawned-monsters idx)
        (= added #t))))

  ;; same, with items
  (forn (i 0 num-items)
    (let added #f)
    (while (not added)
      (let x (+ [room 'x1] (rng:dice 1 [room 'width])))
      (let y (+ [room 'y1] (rng:dice 1 [room 'height])))
      (let idx (.xy-idx map x y))
      (unless (arr-contains? spawned-items idx)
        (push! spawned-items idx)
        (= added #t))))

  ;; spawn the monsters
  (for idx in spawned-monsters
    (let pos (.idx-xy map idx))
    (spawner:random-monster [pos 'x] [pos 'y]))

  ;; spawn the items
  (for idx in spawned-items
    (let pos (.idx-xy map idx))
    (spawner:health-potion [pos 'x] [pos 'y])))
