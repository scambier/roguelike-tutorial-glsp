(require "game/structs.glsp")
(require "game/utils.glsp")
(require "game/ecs.glsp")
(require "game/systems.glsp")
(require "game/map.glsp")

; input manager
(defn player-input ()
  (let player (.fetch world 'player))
  (let pos (.get-cmp world player Position))
  (when (key? "up") (try-move-player 0 -1))
  (when (key? "down") (try-move-player 0 1))
  (when (key? "left") (try-move-player -1 0))
  (when (key? "right") (try-move-player 1 0))
  (when (key? "escape") (exit)))


(defn try-move-player (dx dy)
  (let player (.fetch world 'player))
  (let tiles [(.fetch world 'map) 'tiles])
  (let pos (.get-cmp world player Position))
  (let destination (xy-idx (+ [pos 'x] dx) (+ [pos 'y] dy)))
  ; block movement on walls
  (unless (eq? [tiles destination] 'wall)
    (= [pos 'x] (min 79 (max 0 (+ [pos 'x] dx))))
    (= [pos 'y] (min 49 (max 0 (+ [pos 'y] dy))))))


;;
;; entry point
;;
(defn main:init ()
  ; init world
  (def world (World))

  ; init the map
  (let map (new-map-rooms-and-corridors))
  (.save world 'map map)

  ; init player and save its ref
  (let (px py) (.center (-> map ['rooms] [0])))
  (let player (.add-entity world
    (Player)
    (.simple Renderable \@)
    (Position:new px py)))
  (.save world 'player player))


;;
;; update called every tick
;;
(defn main:update ()
  (cls)
  (player-input)
  (draw-map (.fetch world 'map))
  (sys:render world))
