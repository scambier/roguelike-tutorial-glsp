(load "game/utils.glsp")
(load "game/components.glsp")
(load "game/systems/index.glsp")
(load "game/map.glsp")
(load "game/player.glsp")
(load "game/ui.glsp")


(defclass GameState
  (fsm
    ; all the work that needs to be done once per turn
    (state* Running
      (met on-step ()
        (sys:visibility)    ; compute who's seeing what
        (sys:monster-ai)    ; act
        (sys:melee-combat)  ; initiate melee combat
        (sys:damage)        ; apply damages
        (sys:damage:clean-dead) ; dipose of bodies
        (sys:map-indexing)  ; update the map's state
        (@enab! 'Paused)))

    ; what's happening when we wait for an input
    (state Paused
      (met on-step ()
        (let pressed (player-input))
        (when pressed
          (@enab! 'Running))))))

;;
;; entry point
;;
(defn main:init ()
  (log:add "Good luck.")
  (ctx:scanlines! #t)
  ;(ctx:burn! (Color 1 1 1))
  ; init the global world
  (def :world (World))
  (def :state (GameState))

  ; init the map
  (let map (new-map-rooms-and-corridors))
  (.save :world 'map map) ; save a global ref

  ; init the player
  (let rooms (.get-rooms map))
  (let (px py) (.center [rooms 0]))
  (let player
    (add-entity
      (Player)
      (Name (name "Player"))
      (Renderable (glyph \@)  (fg (Color 1 1 1)) (bg (Color 0 0 0)))
      (Position (x px) (y py))
      (Viewshed (visible-tiles (arr)) (range 9) (dirty #t))
      (CombatStats (max-hp 30) (hp 30) (defense 2) (power 5))))
  (.save :world 'player player) ; save a global ref


  ; init the monsters
  (let rng (RNG))
  (for (i room) in (enumerate (skip 1 rooms))
    (let (x y) (.center room))
    (let name)
    (let glyph)
    (match (.roll-dice rng 1 2)
      (1 (= name "Goblin") (= glyph \g))
      (_ (= name "Orc") (= glyph \o)))
    (add-entity
      (Position x y)
      (Renderable (glyph glyph) (fg (Color 1 0 0)) (bg (Color 0 0 0)))
      (Viewshed (visible-tiles (arr)) (range 8) (dirty #t))
      (Name (name "{name} {i}"))
      (Monster)
      (BlocksTile)
      (CombatStats (max-hp 16) (hp 16) (defense 1) (power 4)))))


;;
;; update called every tick
;;
(defn main:update ()
  (cls)
  (.on-step :state)
  (draw-map (ecs-fetch 'map))
  (sys:render)
  (draw-ui))
