(load "game/components.glsp")
(load "game/utils.glsp")
(load "game/systems/index.glsp")
(load "game/map.glsp")

; input manager
(defn player-input (world)
  (let
    player (.fetch world 'player)
    pos (get-cmp world player Position)
    map (.fetch world 'map))

  (when (key? "up") (try-move-player map 0 -1))
  (when (key? "down") (try-move-player map 0 1))
  (when (key? "left") (try-move-player map -1 0))
  (when (key? "right") (try-move-player map 1 0))
  (when (key? "escape") (exit)))


(defn try-move-player (map dx dy)
  (let
    player (.fetch :world 'player)
    (pos, viewshed) (get-cmp :world player Position Viewshed)
    destination (.xy-idx map (+ [pos 'x] dx) (+ [pos 'y] dy)))

  ; block movement on walls
  (when (.is-walkable map destination)
    (= [pos 'x] (min (- [map 'width] 1) (max 0 (+ [pos 'x] dx))))
    (= [pos 'y] (min (- [map 'height] 1) (max 0 (+ [pos 'y] dy)))))
  (= [viewshed 'dirty] #t))

;;
;; entry point
;;
(defn main:init ()
  ; init the global world
  ; (def :world (World))
  (def :world (World2))

  ; init the map
  (let map (new-map-rooms-and-corridors))
  (.save :world 'map map)

  ; init player and save its ref
  (let rooms (.get-rooms map))
  (let (px py) (.center [rooms 0]))
  (let player
    (add-entity
      :world
      (Player)
      (Renderable (glyph \@)  (fg (Color 1 1 1)) (bg (Color 0 0 0)))
      (Position (x px) (y py))
      (Viewshed (visible-tiles (arr)) (range 8) (dirty #t))))
  (.save :world 'player player)

  ; init the monsters
  (for room in (skip 1 rooms)
    (let (x y) (.center room))
    (add-entity
      :world
      (Position x y)
      (Renderable (glyph \g) (fg (Color 1 0 0)) (bg (Color 0 0 0)))
      (Viewshed (visible-tiles (arr)) (range 8) (dirty #t)))))


;;
;; update called every tick
;;
(defn main:update ()
  (cls)
  (player-input :world)
  (draw-map (.fetch :world 'map))
  (sys:render :world)
  (sys:visibility :world))
