(load "game/utils.glsp")
(load "game/components.glsp")
(load "game/systems/index.glsp")
(load "game/map.glsp")
(load "game/player.glsp")
(load "game/ui.glsp")
(load "game/spawner.glsp")


(defclass GameState
  (fsm
    ; all the work that needs to be done once per turn
    (state* Running
      (met on-step ()
        (sys:visibility)    ; compute who's seeing what
        (sys:monster-ai)    ; act
        (sys:melee-combat)  ; initiate melee combat
        (sys:damage)        ; apply damages
        (sys:damage:clean-dead) ; dipose of bodies
        (sys:map-indexing)  ; update the map's state
        (@enab! 'Paused)))

    ; what's happening when we wait for an input
    (state Paused
      (met on-step ()
        (let pressed (player-input))
        (when pressed
          (@enab! 'Running))))))

;;
;; entry point
;;
(defn main:init ()
  (rng:seed= "lorem")
  (log:add "Good luck.")
  (ctx:scanlines! #t)
  ;(ctx:burn! (Color 1 1 1))
  ; init the global world
  (def :world (World))
  (def :state (GameState))

  ; init the map
  (let map (new-map-rooms-and-corridors))
  (ecs:set 'map map) ; save a global ref

  ; init the player
  (let rooms (.get-rooms map))
  (let (px py) (.center [rooms 0]))
  (let player (spawner:player px py))
  (ecs:set 'player player) ; save a global ref


  ; init the monsters
  (for (i room) in (enumerate (skip 1 rooms))
    (spawner:room room)))


;;
;; update called every tick
;;
(defn main:update ()
  (cls)
  (.on-step :state)
  (draw-map (ecs:fetch 'map))
  (sys:render)
  (draw-ui))
