(include "game/utils.glsp")
(include "game/ecs.glsp")

(defstruct Renderable
    glyph)

(defstruct Position
    x y)

(defstruct Enemy
    x y)

(defstruct Player)

; init world
(let world (World))

; init player and save its ref
(let player (.add-entity world
    (Player)
    (Renderable:new "@")
    (Position:new (/ :width 2) (/ :height 2))))

(.set-res world 'player player)

; rendering system
(defn sys:render (world)
    (for (entity (pos render)) in (.query world Position Renderable)
        (print [pos 'x] [pos 'y] [render 'glyph])))

; input manager
(defn player-input ()
    (let player (.get-res world 'player))
    (let pos (.get-cmp world player Position))
    (when (key? "up") (dec! [pos 'y]))
    (when (key? "down") (inc! [pos 'y]))
    (when (key? "left") (dec! [pos 'x]))
    (when (key? "right") (inc! [pos 'x]))
    (when (key? "escape") (exit))
)

(defn run ()
    (cls)
    (player-input)
    (sys:render world)
)
