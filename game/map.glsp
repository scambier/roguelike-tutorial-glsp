(defn new-map-rooms-and-corridors ()
  (let
    map (Map :width (- :height 7)),
    max-rooms 30, min-size 6, max-size 10)

  (forn (_ 0 max-rooms)
    (let
      w (rng:range min-size max-size)
      h (rng:range min-size max-size)
      x (rng:dice 1 (- [map 'width] w 1))
      y (rng:dice 1 (- [map 'height] h 1))
      new-room (Rect x y w h)
      ok #t)

    (let rooms (.get-rooms map))
    (for other_room in rooms
      (when (.intersect? new-room other_room) (= ok #f)))

    (when ok
      (.apply-room map new-room)
      (unless (empty? rooms)
        (let
          (new-x new-y) (.center new-room)
          (prev-x prev-y) (.center (last-item rooms)))

        (if (== (rng:range 0 2) 1)
          (do
            (.apply-horizontal-tunnel map prev-x new-x prev-y)
            (.apply-vertical-tunnel map prev-y new-y new-x))

          (do
            (.apply-vertical-tunnel map prev-y new-y prev-x)
            (.apply-horizontal-tunnel map prev-x new-x new-y))))

      (.add-room map new-room)))
  map)
