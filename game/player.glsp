; input manager
(defn player-input (world)
  (let
    player (.fetch world 'player)
    pos (get-cmp world player Position)
    map (.fetch world 'map))

  ; cardinals
  (when (or (key? "up") (key? "numpad8") (key? "k")) (try-move-player map 0 -1))
  (when (or (key? "down") (key? "numpad2") (key? "j")) (try-move-player map 0 1))
  (when (or (key? "left") (key? "numpad4") (key? "h")) (try-move-player map -1 0))
  (when (or (key? "right") (key? "numpad6") (key? "l")) (try-move-player map 1 0))

  (when (key? "escape") (exit)))


(defn try-move-player (map dx dy)
  (let
    player (.fetch :world 'player)
    (pos, viewshed) (get-cmp :world player Position Viewshed)
    destination (.xy-idx map (+ [pos 'x] dx) (+ [pos 'y] dy)))

  ; block movement on walls
  (when (.is-walkable map destination)
    (= [pos 'x] (min (- [map 'width] 1) (max 0 (+ [pos 'x] dx))))
    (= [pos 'y] (min (- [map 'height] 1) (max 0 (+ [pos 'y] dy)))))
  (= [viewshed 'dirty] #t))