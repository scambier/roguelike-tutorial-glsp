; input manager
; returns #t if a key was pressed, #f otherwise
(defn player-input ()
  (let
    player (ecs:fetch 'player)
    pos (ecs:get-cmp player Position)
    map (ecs:fetch 'map))

  (match :pressed-key
    ; cardinals
    ((or "up" "numpad8" "k") (try-move-player map 0 -1))
    ((or "down" "numpad2" "j") (try-move-player map 0 1))
    ((or "left" "numpad4" "h") (try-move-player map -1 0))
    ((or "right" "numpad6" "l") (try-move-player map 1 0))
    ; diagonals
    ((or "numpad7" "u") (try-move-player map -1 -1))
    ((or "numpad9" "y") (try-move-player map 1 -1))
    ((or "numpad1" "b") (try-move-player map -1 1))
    ((or "numpad3" "n") (try-move-player map 1 1))
    ; wait
    ((or "numpad5") (try-move-player map 0 0))

    ("escape" (exit))
    (_ (return #f)))
  #t)


(defn try-move-player (map dx dy)
  (let
    player (ecs:fetch 'player)
    map (ecs:fetch 'map)
    (pos, viewshed) (ecs:get-cmp player Position Viewshed)
    destination (.xy-idx map (+ [pos 'x] dx) (+ [pos 'y] dy)))

  ; if an enemy is on the destination tile, attack it
  (for e in (.entities-at map destination)
    (let combat (ecs:get-cmp e CombatStats))
    (when (and combat (neq? player e))
      (ecs:add-cmp player (WantsToMelee (target e)))
      (return)))

  ; block movement on walls
  (when (.walkable? map destination)
    (= [pos 'x] (min (- [map 'width] 1) (max 0 (+ [pos 'x] dx))))
    (= [pos 'y] (min (- [map 'height] 1) (max 0 (+ [pos 'y] dy)))))
  (= [viewshed 'dirty] #t))
