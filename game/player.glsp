; input manager
; returns #t if a key was pressed, #f otherwise
(defn player-input (world)
  (let
    player (.fetch world 'player)
    pos (get-cmp world player Position)
    map (.fetch world 'map))

  (match ctx:key
    ((or "up" "numpad8" "k") (try-move-player map 0 -1))
    ((or "down" "numpad2" "j") (try-move-player map 0 1))
    ((or "left" "numpad4" "4") (try-move-player map -1 0))
    ((or "right" "numpad6" "l") (try-move-player map 1 0))
    ("escape" (exit))
    (_ (return #f)))

  #t)


(defn try-move-player (map dx dy)
  (let
    player (.fetch :world 'player)
    (pos, viewshed) (get-cmp :world player Position Viewshed)
    destination (.xy-idx map (+ [pos 'x] dx) (+ [pos 'y] dy)))

  ; block movement on walls
  (when (.is-walkable map destination)
    (= [pos 'x] (min (- [map 'width] 1) (max 0 (+ [pos 'x] dx))))
    (= [pos 'y] (min (- [map 'height] 1) (max 0 (+ [pos 'y] dy)))))
  (= [viewshed 'dirty] #t))