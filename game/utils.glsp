; checks if `a` contains all items of `b`
; TODO: rewrite in rust?
(defn arr-contains-arr? (a b)
  (= a (if (iter? a) (arr ..a) a)) ; converts iterables to arrays first
  (= b (if (iter? b) (arr ..b) b))
  (all? (fn (needle) (index-of a needle)) b))


(defn neq? (..args)
  (not (eq? ..args)))

(defn != (..args)
  (not (== ..args)))

; like `(position haystack needle)` but without the callback
(defn index-of (haystack needle)
  (position haystack (fn (e) (eq? e needle))))

(defn arr-contains? (haystack needle)
  (let index (index-of haystack needle))
  (and (neq? index #n) (>= index 0)))


; converts a value <0 >0 ==0 to symbols '< '> '==
; useful for `(sort)`
(defn gt-lt (val)
  (when (< val 0) (return '<))
  (when (> val 0) (return '>))
  '==)


(defn last-item (array)
  [array (- (len array) 1)])


;
; ECS syntactic sugar
;

(defn ecs:spawn (..components)
  (.add-entity :world (arr ..components)))

(defn ecs:query (..components)
  (.query :world (arr ..components)))

(defn ecs:get-cmp (entity ..components)
  (let res (.get-cmp :world entity (arr ..components)))
  (if (== (len res) 1)
    [res 0]
    res))

(defn ecs:del-cmp (entity type)
  (.del-cmp :world entity type))

(defn ecs:add-cmp (entity ..components)
  (.add-cmp :world entity (arr ..components)))

(defn ecs:set (sym val)
  (.save :world sym val))

(defn ecs:fetch (sym)
  (.fetch :world sym))

(defn ecs:clear (type)
  (.clear-cmp :world type))
