(defn sys:monster-ai (world)
  (let
    player (.fetch world 'player)
    gamemap (.fetch world 'map)
    player-pos (get-cmp world player Position)
    player-idx (.xy-idx gamemap [player-pos 'x] [player-pos 'y]))

  (for (e (viewshed pos monster name)) in (query world Viewshed Position Monster Name)
    (let pos-idx (.xy-idx gamemap [pos 'x] [pos 'y]))
    ; convert the viewsheld visible-tiles into an array of ids
    ; and check if the player is within range
    (let mapped (arr ..(map (fn1 (.xy-idx gamemap [_ 'x] [_ 'y])) [viewshed 'visible-tiles])))

    (when (arr-contains? mapped player-idx)
      (console:log "{[name 'name]} growls at you")
      ; get path from mob to player
      (let path (.a* gamemap pos-idx player-idx))
      ; if a path exists, move mob towards player
      (when (and [path 'success] (> (len [path 'steps]) 1))
        (let new-pos (.idx-xy gamemap (-> path ['steps] [1])))
        (= [pos 'x] [new-pos 0])
        (= [pos 'y] [new-pos 1])
        (= [viewshed 'dirty] #t)))))

